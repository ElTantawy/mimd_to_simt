Thanks for your interest in our work. Below is a very short description of how to use our modified version of GPGPUsim to implement AWARE. For more details about the use of GPGPUsim, please refer to the main README file in the distribution folder or to GPGPUsim online manual (http://gpgpu-sim.org/).


Citation:
--------
Please if you are using this work, cite our MICRO 2016 paper. 
"Ahmed ElTantawy, Tor Aamodt, Enabling MIMD Synchronization on SIMT Architectures, to appear in proceedings of the ACM/IEEE Int'l Symposium on Microarchitecture (MICRO'16), October 15-19, 2016, Taipei, Taiwan."

AWARE Configuration:
-------------------
1- SIMT reconvergence model
There are two models supported. (1) Stack based reconvergence (the baseline), (2) Adaptive Warp Reconvergence (AWARE). You can choose either models using the configuration option (-gpgpu_simd_model) with a value of 1 or 2 to choose Stack or AWARE respectively.
 
2- Time-Out value:
The time out value is set using GPGPUsim configuration file using the configuration option (-gpgpu_simd_rec_time_out). To set it to the maximum value - that is unlikely to hit - you can set it to -1 which is equivelent to maximum unsigned value. Otherwise, set it to any number of cycles. The timeout will happens when the reconvergence entry is not updated for for a number of cycles > TimeOUT value.

3- Delayed reconvergence points:
As explained in our paper, delayed reconvergence locations are evaluated using a compiler pass (2nd Algorithm in the paper). We currently implement this Algorithm in LLVM and operate on the LLVM-IR layer. However, given that we disable optimizations from LLVM-IR to PTX (i.e., that of NVPTX) the control flow graph remains the same and there is one to one mapping between delayed reconvergence locations in LLVM-IR and equivelent locations in PTX and we do this mapping manually. The delayed reconvergence points are set throught a file included in the same folder in which you plan to run your simulation. 
The file name is introduced to GPGPUsim through and envirnment variable (DELAYED_REC_INFO) as follows "export DELAYED_REC_INFO=delayed_rec_filename". The format of the file is shown below:

"Kernel name in PTX":"The ID of the basicblock that ends with the branch which we will delay its reconvergence point":"The ID of the basicblock that includes the delayed reconvergence point":"The specifc reconvergence PC of the delayed reconvergence point", (repeat the same sequence for different branches either in the same or in different kernels),* 

Example:
_Z24kernel_buildtable_atomicP9HashTableP10TableEntryPji:1:3:0x190,*

More examples can be found in the test directory that can be found in this directory.




AWARE Running:
-------------
Nothing special need to be done to run AWARE with the support of Timed-Out reconvergence. However, to run aware with delayed reconvergence points, you will need to make sure that you are simulating the PTX file for which you are setting its delayed reconvergence points. Since we use LLVM to detect delayed reconvergence points on the LLVM-IR level, then we need to use PTX files that are generated from LLVM (or particularly NVPTX) as well which is different than what the NVCC compiler would generate. Luckily, GPGPUsim allows you to simulate a PTX file directly by setting some environment variables. Here is an examples of the steps you would do to run the hashtable benchmark as an example:


export PTX_SIM_KERNELFILE=hashtable.O2.cu.ptx
export PTX_SIM_USE_PTX_FILE=1
export DELAYED_REC_INFO=delayed_rec_HT.config
./ht -atomic --numBlocks=240 --hashEntries=81920




AWARE Implementation:
--------------------
The AWARE implementation is mostly located in abstract_hardware_model.(h/cc) inside the class "simt_tables" that includes two classes: simt_splits_table and simt_reconvergence_table. The implementation is hopefully clear enough that it can be understood given that the details of operation in the paper are understood. 

There is also the part that updates the reconvergence points in GPGPUsim. This part is found in ptx_ir.cc, mainly in function_info::update_postdominators() functions.
